// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeagueOfLegendsClient is the client API for LeagueOfLegends service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeagueOfLegendsClient interface {
	GetChampion(ctx context.Context, in *GetChampionRequest, opts ...grpc.CallOption) (*GetChampionResponse, error)
	ListChampions(ctx context.Context, in *ListChampionsRequest, opts ...grpc.CallOption) (*ListChampionsResponse, error)
	GetBattleField(ctx context.Context, in *GetBattleFieldRequest, opts ...grpc.CallOption) (*GetBattleFieldResponse, error)
}

type leagueOfLegendsClient struct {
	cc grpc.ClientConnInterface
}

func NewLeagueOfLegendsClient(cc grpc.ClientConnInterface) LeagueOfLegendsClient {
	return &leagueOfLegendsClient{cc}
}

func (c *leagueOfLegendsClient) GetChampion(ctx context.Context, in *GetChampionRequest, opts ...grpc.CallOption) (*GetChampionResponse, error) {
	out := new(GetChampionResponse)
	err := c.cc.Invoke(ctx, "/lol.LeagueOfLegends/GetChampion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leagueOfLegendsClient) ListChampions(ctx context.Context, in *ListChampionsRequest, opts ...grpc.CallOption) (*ListChampionsResponse, error) {
	out := new(ListChampionsResponse)
	err := c.cc.Invoke(ctx, "/lol.LeagueOfLegends/ListChampions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leagueOfLegendsClient) GetBattleField(ctx context.Context, in *GetBattleFieldRequest, opts ...grpc.CallOption) (*GetBattleFieldResponse, error) {
	out := new(GetBattleFieldResponse)
	err := c.cc.Invoke(ctx, "/lol.LeagueOfLegends/GetBattleField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeagueOfLegendsServer is the server API for LeagueOfLegends service.
// All implementations must embed UnimplementedLeagueOfLegendsServer
// for forward compatibility
type LeagueOfLegendsServer interface {
	GetChampion(context.Context, *GetChampionRequest) (*GetChampionResponse, error)
	ListChampions(context.Context, *ListChampionsRequest) (*ListChampionsResponse, error)
	GetBattleField(context.Context, *GetBattleFieldRequest) (*GetBattleFieldResponse, error)
	mustEmbedUnimplementedLeagueOfLegendsServer()
}

// UnimplementedLeagueOfLegendsServer must be embedded to have forward compatible implementations.
type UnimplementedLeagueOfLegendsServer struct {
}

func (UnimplementedLeagueOfLegendsServer) GetChampion(context.Context, *GetChampionRequest) (*GetChampionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampion not implemented")
}
func (UnimplementedLeagueOfLegendsServer) ListChampions(context.Context, *ListChampionsRequest) (*ListChampionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChampions not implemented")
}
func (UnimplementedLeagueOfLegendsServer) GetBattleField(context.Context, *GetBattleFieldRequest) (*GetBattleFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBattleField not implemented")
}
func (UnimplementedLeagueOfLegendsServer) mustEmbedUnimplementedLeagueOfLegendsServer() {}

// UnsafeLeagueOfLegendsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeagueOfLegendsServer will
// result in compilation errors.
type UnsafeLeagueOfLegendsServer interface {
	mustEmbedUnimplementedLeagueOfLegendsServer()
}

func RegisterLeagueOfLegendsServer(s grpc.ServiceRegistrar, srv LeagueOfLegendsServer) {
	s.RegisterService(&LeagueOfLegends_ServiceDesc, srv)
}

func _LeagueOfLegends_GetChampion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeagueOfLegendsServer).GetChampion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lol.LeagueOfLegends/GetChampion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeagueOfLegendsServer).GetChampion(ctx, req.(*GetChampionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeagueOfLegends_ListChampions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChampionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeagueOfLegendsServer).ListChampions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lol.LeagueOfLegends/ListChampions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeagueOfLegendsServer).ListChampions(ctx, req.(*ListChampionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeagueOfLegends_GetBattleField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBattleFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeagueOfLegendsServer).GetBattleField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lol.LeagueOfLegends/GetBattleField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeagueOfLegendsServer).GetBattleField(ctx, req.(*GetBattleFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeagueOfLegends_ServiceDesc is the grpc.ServiceDesc for LeagueOfLegends service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeagueOfLegends_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lol.LeagueOfLegends",
	HandlerType: (*LeagueOfLegendsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChampion",
			Handler:    _LeagueOfLegends_GetChampion_Handler,
		},
		{
			MethodName: "ListChampions",
			Handler:    _LeagueOfLegends_ListChampions_Handler,
		},
		{
			MethodName: "GetBattleField",
			Handler:    _LeagueOfLegends_GetBattleField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lol/lol.proto",
}
